source('Generate.r')
source('OutputMeasures.r')
source('SMAA-Boot.r')
source('SMAA1.r')
source('SMAA2.r')
source('SMAA3.r')
source('SMAA4.r')
source('Weights_R2.r')
#source('Weights_incr_order.r')
source('SimWR.r')
###################################################################
# k is number of "scenarios" used in generation of attribute values
# runs is number of SMAA runs
# sims is number of simulations run at each combination of parameter values
K <<- 15000
nd <<- "T"
runs <<- 10000
sims <<- 200
simname <<- date()
identifier <<- "run_sim_WR_inc"
thin.f <<- 10
u_c <<- 0
t1=Sys.time()
runsimWR(K=K,nd=nd,runs=runs,sims=sims,simname=simname,identifier=identifier)
t2=Sys.time()
Timer=t2-t1
library(hitandrun)
library(smaa)
setwd("/Users/iandurbach/Documents/Research/120124_JonPapers/SimPaper/2015/revision2/code/")
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Generate.r')
source('OutputMeasures.r')
source('SMAA-Boot.r')
source('SMAA1.r')
source('SMAA2.r')
source('SMAA3.r')
source('SMAA4.r')
source('Weights_R2.r')
#source('Weights_incr_order.r')
source('SimWR.r')
###################################################################
# k is number of "scenarios" used in generation of attribute values
# runs is number of SMAA runs
# sims is number of simulations run at each combination of parameter values
K <<- 15000
nd <<- "T"
runs <<- 10000
sims <<- 200
simname <<- date()
identifier <<- "run_sim_WR_inc"
thin.f <<- 10
u_c <<- 0
t1=Sys.time()
runsimWR(K=K,nd=nd,runs=runs,sims=sims,simname=simname,identifier=identifier)
t2=Sys.time()
Timer=t2-t1
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Generate.r')
source('OutputMeasures.r')
source('Weights.r')
K <<- 15000
nd <<- "T"
runs <<- 10000
sims <<- 500
simname <<- date()
identifier <<- "run_sim_WR_inc"
u_c <<- 0
thin.f = 100
nI <<- 19
J <<- 12
nC <<- wt12[wtx]
wr = nC
dstbn <<- 'skew'
par1 <<- 'highvar'
dstbn <<- 'skew'
par1 <<- 'highvar'
utau <<- 'low'
ulambda <<- 'high'
ta = if(utau == "low"){runif(J,0.2,0.4)}else{runif(J,0.6,0.8)}
la = if(ulambda == "low"){runif(J,0.2,0.4)}else{runif(J,0.6,0.8)}
d1<-gendata(nI,J,K,nd,dstbn,par1)
str(d1)
tmaut<-maut(d1$stdata,nI,J,K,ta,la,u_c)
library(smaa)
tmaut<-maut(d1$stdata,nI,J,K,ta,la,u_c)
tw<<-tmaut$w
egsum<-applyerror(d1$gsum,nI,J,e)
e <<- 0
egsum<-applyerror(d1$gsum,nI,J,e)
K <<- 1                   # number of realizations of Z_ij to generate
d1<-gendata(nI,J,K,nd,dstbn,par1)
d1
str(d1)
d1$stdata
gsum[m,n,7]
str(d1)
d1$gsum[m,n,7]
d1$gsum[,,7]
apply(d1$gsum[,,7],1,sum)
tmaut$utility
source('OutputMeasures.r')
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 500                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 500                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
ta = if(utau == "low"){runif(J,0.2,0.4)}else{runif(J,0.6,0.8)}
ta = if(utau == "low"){runif(J,0.2,0.4)}else{runif(J,0.6,0.8)}
ta
source('ApplyMAUT.r')
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
ta
la
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 1                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 1                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 1                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,ta,la,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 1                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
ta
la
source('OutputMeasures.r')
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 1                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 10                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
library(smaa)
#colnames(output) = c("scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
#                     "mautro4modelbest","modelbestintop3","modelbestintop5")
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 10                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
outputmeasures(smod.1,tmaut$utility)
}
output
myoutput_array = data.frame()
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 10                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
myoutput_array = data.frame()
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
output = outputmeasures(smod.1,tmaut$utility)
myoutput_array = cbind(myoutput_array,output)
}
colnames(myoutput_array) = c("scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 10                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
myoutput_array = c()
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
output = outputmeasures(smod.1,tmaut$utility)
myoutput_array = cbind(myoutput_array,output)
}
colnames(myoutput_array) = c("scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
myoutput_array
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 15000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 5                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
myoutput_array = c()
for (s in 1:sims)
{
d1 = gendata(nI,J,K,nd,dstbn,par1)
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
tw = tmaut$w
# apply "simplified" model here
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
output = outputmeasures(smod.1,tmaut$utility)
myoutput_array = rbind(myoutput_array,output)
}
colnames(myoutput_array) = c("scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
myoutput_array
colnames(myoutput_array) = c("max_u","min_u","scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
myoutput_array
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 1000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 5                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
myoutput_array = c()
for (s in 1:sims)
{
# generate attribute nI*J*K matrix of attribute evaluations
d1 = gendata(nI,J,K,nd,dstbn,par1)
# generate marginal utilities, weights, and global/aggregated utilities
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
# apply "simplified" model here
# this is just a silly example, sums up expected attribute values for each alt.
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
output = outputmeasures(smod.1,tmaut$utility)
myoutput_array = rbind(myoutput_array,output)
}
colnames(myoutput_array) = c("max_u","min_u","scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
myoutput_array
library(smaa)
setwd("/Users/iandurbach/Documents/Research/150306_PortfolioHeuristics/code")
source('Generate.r')
source('ApplyErrors.r')
source('ApplyMAUT.r')
source('Weights.r')
source('OutputMeasures.r')
K <<- 1000                    # number of realizations of Z_ij to generate
nd <<- "T"                     # generated alternatives to be non-dominated? T/F
sims <<- 100                   # number of simulation runs
u_c <<- 0                      # exponent for converting global V into U
nI <<- 19                      # number of alternatives
J <<- 12                       # number of criteria
dstbn <<- 'skew'               # distribution of Z_ij parameter 1 (skew)
par1 <<- 'highvar'             # distribution of Z_ij parameter 2 (highvar/lowvar)
utau <<- 'low'                 # reference point for value function v_j (low/high)
ulambda <<- 'high'             # value at utau for v_j (low/high)
myoutput_array = c()
for (s in 1:sims)
{
# generate attribute nI*J*K matrix of attribute evaluations
d1 = gendata(nI,J,K,nd,dstbn,par1)
# generate marginal utilities, weights, and global/aggregated utilities
tmaut = maut(d1$stdata,nI,J,K,utau,ulambda,u_c)
# apply "simplified" model here
# this is just a silly example, sums up expected attribute values for each alt.
smod.1 = apply(d1$gsum[,,7],1,sum)
# compare true model (MAUT) and simplified one
output = outputmeasures(smod.1,tmaut$utility)
myoutput_array = rbind(myoutput_array,output)
}
colnames(myoutput_array) = c("max_u","min_u","scor","ul","mro4mautbest","mautbestintop3","mautbestintop5",
"mautro4modelbest","modelbestintop3","modelbestintop5")
myoutput_array
apply(myoutput_array,2,mean)
